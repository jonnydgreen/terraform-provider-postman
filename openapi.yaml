openapi: 3.0.3
info:
  contact:
    email: help@postman.com
    name: Postman Support
    url: https://www.postman.com/community/
  description: |
    The Postman API lets you to programmatically access data stored in Postman account with ease.

    ## Getting started

    The easiest way to get started with the Postman API is to [fork this collection](https://learning.postman.com/docs/collaborating-in-postman/version-control/#creating-a-fork) to your own workspace. You can then use Postman to send requests.

    ## Overview

    1. You must use a valid API Key to send requests to the API endpoints. You can get your API key from Postman's [integrations dashboard](https://go.postman.co/settings/me/api-keys).
    1. The API has access rate limits.
    1. The API only responds to HTTPS-secured communications. Any requests sent via HTTP return an HTTP `301` redirect to the corresponding HTTPS resources.
    1. The API returns requests responses in [JSON format](https://en.wikipedia.org/wiki/JSON). When an API request returns an error, it is sent in the JSON response as an `"error": {}` key.
    1. The request method (verb) determines the nature of action you intend to perform. A request made using the `GET` method implies that you want to fetch something from Postman, and `POST` implies you want to save something new to Postman.
    1. API calls respond with the appropriate [HTTP status codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) for all requests. Within the Postman client, when a response is received, the status code is highlighted and is accompanied by a help text that indicates the possible meaning of the response code. A `200 OK` indicates success, while an HTTP `4XX` or HTTP `5XX` response code indicates an error from the requesting client or our API servers, respectively.
    1. Individual resources in your Postman account are accessible using its unique ID (`uid`) value. The `uid` is a simple concatenation of the resource owner's user ID and the resource's ID. For example, a collection's `uid` is `{{owner_id}}-{{collection_id}}` value.

    ## ID and UID

    All items in Postman, such as collections, mocks, workspaces, and APIs, have ID and UIDs:

    - An ID is the unique ID assigned to a Postman item. For example, `ec29121c-5203-409f-9e84-e83ffc10f226`.
    - The UID is the **full** ID of a Postman item. This value is the item's unique ID concatenated with the user ID. For example, in the `12345678-ec29121c-5203-409f-9e84-e83ffc10f226` UID:
      - `12345678` is the user's ID.
      - `ec29121c-5203-409f-9e84-e83ffc10f226` is the item's ID.

    ## Authentication

    An API key is required to be sent as part of every request to the Postman API, in the form of an `X-Api-Key` request header. To get a Postman API key, you can generate one in the [**API keys**](https://postman.postman.co/settings/me/api-keys) section in your Postman account settings.

    An API key tells the API server that the received request from you. Everything that you have access to in Postman is accessible with your API key.

    For ease of use in Postman, you can store your API key as the `postman_api_key` [environment variable](https://www.getpostman.com/docs/environments). The Postman API [collection](https://www.getpostman.com/docs/collections) will automatically use it to make API calls.

    ### API Key related error response

    If an API key is missing, malformed, or invalid, you will receive an HTTP `401 Unauthorized` response code and the following JSON response:

    ```json
    {
    "error": {
        "name": "AuthenticationError",
        "message": "Invalid API Key. Every request requires a valid API Key to be sent."
      }
    }
    ```

    ### Using the API key as a query parameter

    Each request that accepts API key as `X-Api-Key` request header also accepts the key when it is sent as the `apikey` query parameter.

    An API key sent as part of the header has a higher priority when you send the key as both a request header and a query parameter.

    ## Rate Limits

    API access rate limits apply at a per-API key basis in unit time. Access to the API using an API key is limited to **60 requests per minute**. In addition, every API response is accompanied by the following set of headers to identify the status of your use:

    | Header | Description |
    | ------ | ----------- |
    | `X-RateLimit-Limit` | The maximum number of requests that the consumer is permitted to make per minute. |
    | `X-RateLimit-Remaining` | The number of requests remaining in the current rate limit window. |
    | `X-RateLimit-Reset` | The time at which the current rate limit window resets in UTC epoch seconds. |

    Once you reach the rate limit you will receive a response similar to the following HTTP `429 Too Many Requests` response:

    ```json
    {
      "error": {
        "name": "rateLimitError",
        "message": "Rate Limit exceeded. Please retry at 1465452702843"
      }
    }
    ```

    In the event you receive an HTTP `503` response from our servers, it indicates that we have had an unexpected spike in API access traffic. This is usually operational within the next five minutes. If the outage persists or you receive any other form of an HTTP `5XX` error, [contact support](https://support.postman.com/hc/en-us/requests/new/).

    ## Support

    For help regarding accessing the Postman API, you can:

    - Visit [Postman Support](https://support.postman.com/hc/en-us) or our [Community and Support](https://www.postman.com/community/) sites.
    - Reach out to the [Postman community](https://community.postman.com/).
    - Submit a help request to [Postman support](https://support.postman.com/hc/en-us/requests/new/).

    ## Policies

    - [Postman Terms of Service](http://www.postman.com/legal/terms/)
    - [Postman Privacy Policy](https://www.postman.com/legal/privacy-policy/)
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://postman.com/legal/terms/
  title: Postman API
  version: "1.0"
  x-api-id: postman_api_key
  x-audience: Developers
  x-newrelic-app-id:
  - 1162449093
servers:
- url: https://api.getpostman.com
security:
- PostmanApiKey: []
paths:
  /environments:
    get:
      description: Gets information about all of your [environments](https://learning.postman.com/docs/sending-requests/managing-environments/).
      operationId: allEnvironments
      parameters:
      - $ref: '#/components/parameters/workspaceQueryId'
      responses:
        "200":
          content:
            application/json:
              example:
                environments:
                - createdAt: "2020-09-23T14:31:18.000Z"
                  id: 5daabc50-8451-43f6-922d-96b403b4f28e
                  isPublic: false
                  name: Test Environment
                  owner: "12345678"
                  uid: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                  updatedAt: "2020-12-04T14:13:40.000Z"
                - createdAt: "2020-02-04T19:34:23.000Z"
                  id: 7d786cc8-142b-4d62-b5a5-872afc37ad16
                  isPublic: false
                  name: Environment Scanner
                  owner: "12345678"
                  uid: 12345678-7d786cc8-142b-4d62-b5a5-872afc37ad16
                  updatedAt: "2020-08-12T13:34:06.000Z"
              schema:
                properties:
                  environments:
                    items:
                      properties:
                        createdAt:
                          description: The date and time at which the environment
                            was created.
                          example: "2020-09-23T14:31:18.000Z"
                          format: date-time
                          type: string
                        id:
                          description: The environment's ID.
                          example: 5daabc50-8451-43f6-922d-96b403b4f28e
                          format: uuid
                          type: string
                        isPublic:
                          description: If true, the environment is public.
                          example: false
                          type: boolean
                        name:
                          description: The environment's name.
                          example: Test Environment
                          type: string
                        owner:
                          description: The environment owner's ID.
                          example: "12345678"
                          type: string
                        uid:
                          description: The environment's unique ID.
                          example: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                          format: uid
                          type: string
                        updatedAt:
                          description: The date and time at which the environment
                            was last updated.
                          example: "2020-12-04T14:13:40.000Z"
                          format: date-time
                          type: string
                      type: object
                    type: array
                type: object
          description: Successful Response
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/instanceNotFoundEnvironment'
        "429":
          $ref: '#/components/responses/rateLimited'
        "500":
          $ref: '#/components/responses/internalServerError'
      summary: Get all environments
      tags:
      - Environments
    post:
      description: Creates an environment.
      operationId: createEnvironment
      parameters:
      - $ref: '#/components/parameters/workspaceQueryId'
      requestBody:
        content:
          application/json:
            example:
              environment:
                name: Test Environment
                values:
                - enabled: true
                  key: apiKey
                  type: secret
                  value: PMAK-1234-5678-0987-6543
                - enabled: false
                  key: variable_1
                  type: default
                  value: The variable_1 value.
            schema:
              properties:
                environment:
                  properties:
                    name:
                      description: The environment's name.
                      example: Test Environment
                      type: string
                    values:
                      description: Information about the environment's variables.
                      items:
                        properties:
                          enabled:
                            description: If true, the variable is enabled.
                            example: true
                            type: boolean
                          key:
                            description: The variable's name.
                            example: apiKey
                            type: string
                          type:
                            description: The variable type.
                            enum:
                            - secret
                            - default
                            - any
                            example: secret
                            type: string
                          value:
                            description: The variable's value.
                            example: PMAK-1234-5678-0987-6543
                            type: string
                        type: object
                      type: array
                  required:
                  - name
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              example:
                environment:
                  id: 5daabc50-8451-43f6-922d-96b403b4f28e
                  name: Test Environment
                  uid: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
              schema:
                properties:
                  environment:
                    properties:
                      id:
                        description: The environment's ID.
                        example: 5daabc50-8451-43f6-922d-96b403b4f28e
                        format: uuid
                        type: string
                      name:
                        description: The environment's name.
                        example: Test Environment
                        type: string
                      uid:
                        description: The environment's unique ID.
                        example: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                        format: uid
                        type: string
                    type: object
                type: object
          description: Successful Response
        "400":
          content:
            application/json:
              example:
                error:
                  details:
                  - ': must have required property ''environment'''
                  message: Found 1 errors with the supplied environment.
                  name: malformedRequestError
              schema:
                properties:
                  error:
                    properties:
                      details:
                        items:
                          example: ': must have required property ''environment'''
                          type: string
                        type: array
                      message:
                        example: Found 1 errors with the supplied environment.
                        type: string
                      name:
                        example: malformedRequestError
                        type: string
                    type: object
                type: object
          description: Bad Request
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/forbiddenError'
        "429":
          $ref: '#/components/responses/rateLimited'
        "500":
          $ref: '#/components/responses/internalServerError'
      summary: Create an environment
      tags:
      - Environments
  /environments/{environmentId}:
    delete:
      description: Deletes an environment.
      operationId: deleteEnvironment
      responses:
        "200":
          content:
            application/json:
              example:
                environment:
                  id: 5daabc50-8451-43f6-922d-96b403b4f28e
                  uid: 1234567-5daabc50-8451-43f6-922d-96b403b4f28e
              schema:
                properties:
                  environment:
                    properties:
                      id:
                        description: The deleted environment's ID.
                        example: 4dfb28a4-9a6c-4ce4-b31a-17c26a8b2cce
                        format: uuid
                        type: string
                      uid:
                        description: The deleted environment's unique ID.
                        example: 5852-4dfb28a4-9a6c-4ce4-b31a-17c26a8b2cce
                        format: uid
                        type: string
                    type: object
                type: object
          description: Successful Response
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/instanceNotFoundEnvironment'
        "429":
          $ref: '#/components/responses/rateLimited'
        "500":
          $ref: '#/components/responses/internalServerError'
      summary: Delete an environment
      tags:
      - Environments
    get:
      description: Gets information about an environment.
      operationId: singleEnvironment
      responses:
        "200":
          content:
            application/json:
              example:
                environment:
                  createdAt: "2020-11-05T13:59:22.000Z"
                  id: 5daabc50-8451-43f6-922d-96b403b4f28e
                  isPublic: false
                  name: Test Environment
                  owner: "12345678"
                  updatedAt: "2020-11-05T13:59:23.000Z"
                  values:
                  - enabled: true
                    key: apiKey
                    type: secret
                    value: PMAK-1234-5678-0987-6543
              schema:
                properties:
                  environment:
                    properties:
                      createdAt:
                        description: The date and time at which the environment was
                          created.
                        example: "2020-11-05T13:59:22.000Z"
                        format: date-time
                        type: string
                      id:
                        description: The environment's ID.
                        example: 5daabc50-8451-43f6-922d-96b403b4f28e
                        format: uuid
                        type: string
                      isPublic:
                        description: If true, the environment is public.
                        example: false
                        type: boolean
                      name:
                        description: The environment's name.
                        example: Test Environment
                        type: string
                      owner:
                        description: The ID of environment's owner.
                        example: "12345678"
                        type: string
                      updatedAt:
                        description: The date and time at which the environment was
                          last updated.
                        example: "2020-11-05T13:59:23.000Z"
                        format: date-time
                        type: string
                      values:
                        description: Information about the environment's variables.
                        items:
                          properties:
                            enabled:
                              description: If true, the variable is enabled.
                              example: true
                              type: boolean
                            key:
                              description: The variable's name.
                              example: apiKey
                              type: string
                            type:
                              description: The variable type.
                              enum:
                              - secret
                              - default
                              - any
                              example: secret
                              type: string
                            value:
                              description: The variable's value.
                              example: PMAK-1234-5678-0987-6543
                              type: string
                          type: object
                        type: array
                    type: object
                type: object
          description: Successful Response
        "400":
          $ref: '#/components/responses/instanceNotFoundEnvironment'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "429":
          $ref: '#/components/responses/rateLimited'
        "500":
          $ref: '#/components/responses/internalServerError'
      summary: Get an environment
      tags:
      - Environments
    parameters:
    - $ref: '#/components/parameters/environmentId'
    put:
      description: Updates an environment.
      operationId: updateEnvironment
      requestBody:
        content:
          application/json:
            example:
              environment:
                name: Test A Environment
                values:
                - enabled: false
                  key: variable_a
                  type: default
                  value: The variable_a value.
            schema:
              properties:
                environment:
                  properties:
                    name:
                      description: The environment's name.
                      example: Test Environment
                      type: string
                    values:
                      description: Information about the environment's variables.
                      items:
                        items:
                          properties:
                            enabled:
                              description: If true, the variable is enabled.
                              example: true
                              type: boolean
                            key:
                              description: The variable's name.
                              example: apiKey
                              type: string
                            type:
                              description: The variable type.
                              enum:
                              - secret
                              - default
                              - any
                              example: secret
                              type: string
                            value:
                              description: The variable's value.
                              example: PMAK-1234-5678-0987-6543
                              type: string
                          type: object
                        type: array
                      type: array
                  required:
                  - name
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              example:
                environment:
                  id: 5daabc50-8451-43f6-922d-96b403b4f28e
                  name: Test A Environment
                  uid: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
              schema:
                properties:
                  environment:
                    properties:
                      id:
                        example: 5daabc50-8451-43f6-922d-96b403b4f28e
                        type: string
                      name:
                        example: Test A Environment
                        type: string
                      uid:
                        example: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                        type: string
                    type: object
                type: object
          description: Successful Response
        "400":
          content:
            application/json:
              example:
                error:
                  message: 'Invalid type: null (expected object) at environment.values.0'
                  name: malformedRequestError
              schema:
                properties:
                  error:
                    properties:
                      message:
                        description: The error message.
                        example: 'Invalid type: null (expected object) at environment.values.0'
                        type: string
                      name:
                        description: The error name.
                        example: malformedRequestError
                        type: string
                    type: object
                type: object
          description: Bad Request
        "401":
          $ref: '#/components/responses/Unauthorized'
        "429":
          $ref: '#/components/responses/rateLimited'
        "500":
          $ref: '#/components/responses/internalServerError'
      summary: Update an environment
      tags:
      - Environments
  /workspaces:
    get:
      description: |
        Gets all [workspaces](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/creating-workspaces/). The response includes your workspaces and any workspaces that you have access to.

        **Note:**

        This endpoint's response contains the visibility field. Visibility determines who can access the workspace:

        - `only-me` — Applies to the **My Workspace** workspace.
        - `personal` — Only you can access the workspace.
        - `team` — All team members can access the workspace.
        - `private-team` — Only invited team members can access the workspace.
        - `public` — Everyone can access the workspace.
      operationId: allWorkspaces
      parameters:
      - description: |
          The type of workspace to filter the response by:

          - `team` — Return only team workspaces.
          - `personal` — Return only personal workspaces.
        in: query
        name: type
        required: false
        schema:
          example: team
          type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                Filter by Type:
                  value:
                    workspaces:
                    - id: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                      name: Test Workspace
                      type: personal
                      visibility: personal
                Successful Response:
                  value:
                    workspaces:
                    - id: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                      name: Test Workspace
                      type: personal
                      visibility: personal
                    - id: f8801e9e-03a4-4c7b-b31e-5db5cd771696
                      name: Team Workspace
                      type: team
                      visibility: private-team
              schema:
                properties:
                  workspaces:
                    items:
                      description: Information about the workspace.
                      properties:
                        id:
                          description: The workspace's ID.
                          example: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                          format: uuid
                          type: string
                        name:
                          description: The workspace's name.
                          example: Test Workspace
                          type: string
                        type:
                          description: The type of workspace.
                          enum:
                          - personal
                          - team
                          example: personal
                          type: string
                        visibility:
                          description: |
                            The team's visibility in Postman:

                            - `only-me` — Applies to the **My Workspace** workspace.
                            - `personal` — Only you can access the workspace.
                            - `team` — All team members can access the workspace.
                            - `private-team` — Only invited team members can access the workspace.
                            - `public` — Everyone can access the workspace.
                          enum:
                          - only-me
                          - personal
                          - team
                          - private-team
                          - public
                          example: private-team
                          type: string
                      type: object
                    type: array
                type: object
          description: Successful Response
        "401":
          $ref: '#/components/responses/Unauthorized'
        "429":
          $ref: '#/components/responses/rateLimited'
        "500":
          $ref: '#/components/responses/internalServerError'
      summary: Get all workspaces
      tags:
      - Workspaces
    post:
      description: |
        Creates a new [workspace](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/creating-workspaces/).

        ### Important:

        We **deprecated** linking collections or environments between workspaces. We do **not** recommend that you do this.

        If you have a linked collection or environment, note the following:

        - The endpoint does **not** create a clone of a collection or environment.
        - Any changes you make to a linked collection or environment changes them in **all** workspaces.
        - If you delete a collection or environment linked between workspaces, the system deletes it in **all** the workspaces.
      operationId: createWorkspace
      requestBody:
        content:
          application/json:
            example:
              workspace:
                description: This is a test personal workspace.
                name: Test Workspace
                type: personal
            schema:
              properties:
                workspace:
                  description: Information about the workspace.
                  properties:
                    description:
                      description: The workspace's description.
                      example: This is a test personal workspace.
                      type: string
                    name:
                      description: The workspace's name.
                      example: Test Workspace
                      type: string
                    type:
                      description: |
                        The type of workspace:

                        - `personal` — A personal workspace.
                        - `team` — A team workspace.
                      enum:
                      - personal
                      - team
                      example: personal
                      type: string
                  required:
                  - name
                  - type
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              example:
                workspace:
                  id: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                  name: Test Workspace
              schema:
                properties:
                  workspace:
                    description: Information about the created workspace.
                    properties:
                      id:
                        description: The workspace's ID.
                        example: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                        format: uuid
                        type: string
                      name:
                        description: The workspace's name.
                        example: Test Workspace
                        type: string
                    type: object
                type: object
          description: Successful Response
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/instanceNotFoundDatabase'
        "429":
          $ref: '#/components/responses/rateLimited'
        "500":
          $ref: '#/components/responses/internalServerError'
      summary: Create a workspace
      tags:
      - Workspaces
  /workspaces/{workspaceId}:
    delete:
      description: |
        Deletes an existing workspace.

        ### Important:

        If you delete a workspace that has a linked collection or environment with another workspace, this will delete the collection and environment in **all** workspaces.
      operationId: deleteWorkspace
      responses:
        "200":
          content:
            application/json:
              example:
                workspace:
                  id: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
              schema:
                properties:
                  workspace:
                    description: Information about the deleted workspace.
                    properties:
                      id:
                        description: The workspace's ID.
                        example: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                        format: uuid
                        type: string
                    type: object
                type: object
          description: Successful Response
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/instanceNotFoundWorkspace'
        "429":
          $ref: '#/components/responses/rateLimited'
        "500":
          $ref: '#/components/responses/internalServerError'
      summary: Delete a workspace
      tags:
      - Workspaces
    get:
      description: |
        Gets information about a workspace.

        **Note:**

        This endpoint's response contains the `visibility` field. [Visibility](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/managing-workspaces/#changing-workspace-visibility) determines who can access the workspace:

        - `only-me` — Applies to the **My Workspace** workspace.
        - `personal` — Only you can access the workspace.
        - `team` — All team members can access the workspace.
        - `private-team` — Only invited team members can access the workspace.
        - `public` — Everyone can access the workspace.
      operationId: singleWorkspace
      responses:
        "200":
          content:
            application/json:
              example:
                workspace:
                  apis:
                  - id: 387c2863-6ee3-4a56-8210-225f774edade
                    name: Test API
                    uid: 12345678-387c2863-6ee3-4a56-8210-225f774edade
                  collections:
                  - id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                    name: Test Collection
                    uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                  createdAt: "2022-07-06T16:18:32.000Z"
                  createdBy: "12345678"
                  description: The Test team workspace.
                  environments:
                  - id: 5daabc50-8451-43f6-922d-96b403b4f28e
                    name: Test Environment
                    uid: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                  id: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                  mocks:
                  - id: e3d951bf-873f-49ac-a658-b2dcb91d3289
                    name: Test Mock
                    uid: 12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289
                  monitors:
                  - id: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                    name: Test Monitor
                    uid: 12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                  name: Team Workspace
                  type: team
                  updatedAt: "2022-07-06T20:55:13.000Z"
                  updatedBy: "12345678"
                  visibility: private-team
              schema:
                properties:
                  workspace:
                    description: Information about the workspace.
                    properties:
                      apis:
                        description: The workspace's APIs.
                        items:
                          description: Information about the API.
                          properties:
                            id:
                              description: The API's ID.
                              example: 387c2863-6ee3-4a56-8210-225f774edade
                              format: uuid
                              type: string
                            name:
                              deprecated: true
                              description: The API's name.
                              example: Test API
                              type: string
                            uid:
                              deprecated: true
                              description: The API's unique ID.
                              example: 12345678-387c2863-6ee3-4a56-8210-225f774edade
                              format: uid
                              type: string
                          type: object
                        type: array
                      collections:
                        description: The workspace's collections.
                        items:
                          description: Information about the collection.
                          properties:
                            id:
                              description: The collection's ID.
                              example: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                              format: uuid
                              type: string
                            name:
                              deprecated: true
                              description: The collection's name.
                              example: Test Collection
                              type: string
                            uid:
                              deprecated: true
                              description: The collection's unique ID.
                              example: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                              format: uid
                              type: string
                          type: object
                        type: array
                      createdAt:
                        description: The date and time at which the workspace was
                          created.
                        example: "2022-07-06T16:18:32.000Z"
                        format: date-time
                        type: string
                      createdBy:
                        description: The user ID of the user who created the workspace.
                        example: "12345678"
                        type: string
                      description:
                        description: The workspace's description.
                        example: The Test team workspace.
                        type: string
                      environments:
                        description: The workspace's environments.
                        items:
                          description: Information about the environment.
                          properties:
                            id:
                              description: The environment's ID.
                              example: 5daabc50-8451-43f6-922d-96b403b4f28e
                              format: uuid
                              type: string
                            name:
                              deprecated: true
                              description: The environment's name.
                              example: Test Environment
                              type: string
                            uid:
                              deprecated: true
                              description: The environment's unique ID.
                              example: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                              format: uid
                              type: string
                          type: object
                        type: array
                      id:
                        description: The workspace's ID.
                        example: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                        format: uuid
                        type: string
                      mocks:
                        description: The workspace's mock servers.
                        items:
                          description: Information about the mock server.
                          properties:
                            id:
                              description: The mock server's ID.
                              example: e3d951bf-873f-49ac-a658-b2dcb91d3289
                              format: uuid
                              type: string
                            name:
                              deprecated: true
                              description: The mock server's name.
                              example: Test Mock
                              type: string
                            uid:
                              deprecated: true
                              description: The mock server's unique ID.
                              example: 12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289
                              format: uid
                              type: string
                          type: object
                        type: array
                      monitors:
                        description: The workspace's monitors.
                        items:
                          description: Information about the monitor.
                          properties:
                            id:
                              description: The monitor's ID.
                              example: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                              format: uuid
                              type: string
                            name:
                              deprecated: true
                              description: The monitor's name.
                              example: Test Environment
                              type: string
                            uid:
                              deprecated: true
                              description: The monitor's unique ID.
                              example: 12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                              format: uid
                              type: string
                          type: object
                        type: array
                      name:
                        description: The workspace's name.
                        example: Team Workspace
                        type: string
                      type:
                        description: The type of workspace.
                        enum:
                        - personal
                        - team
                        example: personal
                        type: string
                      updatedAt:
                        description: The date and time at which the workspace was
                          last updated.
                        example: "2022-07-06T20:55:13.000Z"
                        format: date-time
                        type: string
                      updatedBy:
                        description: The user ID of the user who last updated the
                          workspace.
                        example: "12345678"
                        type: string
                      visibility:
                        description: |
                          The workspace's visibility. [Visibility](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/managing-workspaces/#changing-workspace-visibility) determines who can access the workspace:

                          - `only-me` — Applies to the **My Workspace** workspace.
                          - `personal` — Only you can access the workspace.
                          - `team` — All team members can access the workspace.
                          - `private-team` — Only invited team members can access the workspace.
                          - `public` — Everyone can access the workspace.
                        enum:
                        - only-me
                        - personal
                        - team
                        - private-team
                        - public
                        example: private-team
                        type: string
                    type: object
                type: object
          description: Successful Response
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/instanceNotFoundDatabase'
        "429":
          $ref: '#/components/responses/rateLimited'
        "500":
          $ref: '#/components/responses/internalServerError'
      summary: Get a workspace
      tags:
      - Workspaces
    parameters:
    - $ref: '#/components/parameters/workspaceId'
    put:
      description: |
        Updates a workspace.

        **Note:**

        You can change a workspace's type from `personal` to `team`, but you **cannot** change a workspace from `team` to `personal`.

        ### Important:

        We **deprecated** linking collections or environments between workspaces. We do **not** recommend that you do this.

        If you have a linked collection or environment, note the following:

        - The endpoint does **not** create a clone of a collection or environment.
        - Any changes you make to a linked collection or environment changes them in **all** workspaces.
        - If you delete a collection or environment linked between workspaces, the system deletes it in **all** the workspaces.
      operationId: updateWorkspace
      requestBody:
        content:
          application/json:
            example:
              workspace:
                description: This is a test team workspace.
                name: Test Workspace
                type: team
            schema:
              properties:
                workspace:
                  properties:
                    description:
                      description: The workspace's description.
                      example: This is a test team workspace.
                      type: string
                    name:
                      description: The workspace's name.
                      example: Test Workspace
                      type: string
                    type:
                      description: |
                        The type of workspace:

                        - `personal` — A personal workspace.
                        - `team` — A team workspace.
                      enum:
                      - team
                      - personal
                      example: team
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              example:
                workspace:
                  id: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                  name: Test Workspace
              schema:
                properties:
                  workspace:
                    description: Information about the updated workspace.
                    properties:
                      id:
                        description: The workspace's ID.
                        example: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                        format: uuid
                        type: string
                      name:
                        description: The workspace's name.
                        example: Test Workspace
                        type: string
                    type: object
                type: object
          description: Successful Response
        "400":
          content:
            application/json:
              example:
                error:
                  message: The ID provided is not a valid UID.
                  name: invalidUIDError
              schema:
                properties:
                  error:
                    properties:
                      message:
                        description: The error message.
                        example: The ID provided is not a valid UID.
                        type: string
                      name:
                        description: The error name.
                        example: invalidUIDError
                        type: string
                    type: object
                type: object
          description: Bad Request
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          content:
            application/json:
              example:
                error:
                  message: You do not have access to update this workspace.
                  name: forbiddenError
              schema:
                properties:
                  error:
                    properties:
                      message:
                        description: The error message.
                        example: You do not have access to update this workspace.
                        type: string
                      name:
                        description: The error name.
                        example: forbiddenError
                        type: string
                    type: object
                type: object
          description: Forbidden
        "404":
          $ref: '#/components/responses/instanceNotFoundWorkspace'
        "429":
          $ref: '#/components/responses/rateLimited'
        "500":
          $ref: '#/components/responses/internalServerError'
      summary: Update a workspace
      tags:
      - Workspaces
components:
  parameters:
    apiId:
      description: The API's ID.
      in: path
      name: apiId
      required: true
      schema:
        example: 387c2863-6ee3-4a56-8210-225f774edade
        format: uuid
        type: string
    apiVersionId:
      description: The API version's ID.
      in: path
      name: apiVersionId
      required: true
      schema:
        example: a9879d02-74bf-425a-bbec-6d27aa135507
        format: uuid
        type: string
    collectionId:
      description: The collection's ID.
      in: path
      name: collectionId
      required: true
      schema:
        example: 12ece9e1-2abf-4edc-8e34-de66e74114d2
        format: uuid
        type: string
    elementId:
      description: The element's ID or UUID. For Postman Collections you must pass
        the collection's UID (`userId`-`collectionId`) value.
      in: path
      name: elementId
      required: true
      schema:
        example: 5360b75f-447e-467c-9299-12fd6c92450d
        type: string
    elementType:
      description: The Private API Network element type.
      in: path
      name: elementType
      required: true
      schema:
        enum:
        - api
        - folder
        - collection
        - workspace
        example: api
        type: string
    entityId:
      description: |
        The entity's ID value

        - For `documentation` and `test` — The collection UID value.
        - For `environment` — The environment UID value.
        - For `mock` — The mock ID value.
        - For `monitor` — The monitor ID value.
      in: path
      name: entityId
      required: true
      schema:
        example: e3d951bf-873f-49ac-a658-b2dcb91d3289
        format: uuid
        type: string
    environmentId:
      description: The environment's ID.
      in: path
      name: environmentId
      required: true
      schema:
        example: 5daabc50-8451-43f6-922d-96b403b4f28e
        format: uuid
        type: string
    groupId:
      description: The group's ID.
      in: path
      name: groupId
      required: true
      schema:
        example: 405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
        format: uuid
        type: string
    mockId:
      description: The mock's ID.
      in: path
      name: mockId
      required: true
      schema:
        example: e3d951bf-873f-49ac-a658-b2dcb91d3289
        format: uuid
        type: string
    monitorId:
      description: The monitor's ID.
      in: path
      name: monitorId
      required: true
      schema:
        example: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
        format: uuid
        type: string
    relationType:
      description: The relation type.
      example: mock
      in: path
      name: relationType
      required: true
      schema:
        enum:
        - documentation
        - test
        - mock
        - monitor
        type: string
    schemaId:
      description: The schema's ID.
      in: path
      name: schemaId
      required: true
      schema:
        example: 16bb367e-fafb-4ef3-933b-ee3d971866fb
        format: uuid
        type: string
    serverResponseId:
      description: The server response's ID.
      in: path
      name: serverResponseId
      required: true
      schema:
        example: 965cdd16-fe22-4d96-a161-3d05490ac421
        format: uuid
        type: string
    userId:
      description: The user's SCIM ID.
      in: path
      name: userId
      required: true
      schema:
        example: 405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
        type: string
    workspaceId:
      description: The workspace's ID.
      in: path
      name: workspaceId
      required: true
      schema:
        example: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
        format: uuid
        type: string
    workspaceQueryId:
      description: |
        The workspace's ID.

        If you do not include this query parameter, the system defaults to the **My Workspace** workspace.
      example: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
      in: query
      name: workspace
      required: false
      schema:
        format: uuid
        type: string
  responses:
    PANElementCreated:
      content:
        application/json:
          schema:
            description: Information about the Private API Network element.
            properties:
              addedAt:
                description: The date and time at which the element was added.
                example: "2022-06-09T14:48:45.000Z"
                format: date-time
                type: string
              addedBy:
                description: The user who added the element.
                example: 12345678
                type: integer
              createdAt:
                description: The date and time at which the element was created.
                example: "2021-10-11T09:39:33.000Z"
                format: date-time
                type: string
              createdBy:
                description: The user who created the element.
                example: 12345678
                type: integer
              description:
                description: The element's description.
                example: null
                type: string
              href:
                description: The element's Postman HREF.
                example: https://api.getpostman.com/collections/12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                format: url
                type: string
              id:
                description: The element's ID or UID.
                example: 5360b75f-447e-467c-9299-12fd6c92450d
                type: string
              name:
                description: The element's name.
                example: Billing API
                type: string
              parentFolderId:
                description: The parent folder ID.
                example: 1
                type: integer
              summary:
                description: The element's summary.
                example: The payments and account services API.
                type: string
              type:
                description: The element's type.
                example: api
                type: string
              updatedAt:
                description: The date and time at which the element was last updated.
                example: "2022-12-07T17:54:33.000Z"
                format: date-time
                type: string
              updatedBy:
                description: The user who last updated the element.
                example: 12345678
                type: integer
            type: object
      description: Created
    PANFolderCreated:
      content:
        application/json:
          schema:
            description: Information about the Private API Network folder.
            properties:
              createdAt:
                description: The date and time at which the element was created.
                example: "2022-12-07T18:00:39.000Z"
                format: date-time
                type: string
              createdBy:
                description: The user who created the element.
                example: 12345678
                type: integer
              description:
                description: The element's description.
                example: The Billing API.
                type: string
              id:
                description: The folder's ID.
                example: 1
                type: integer
              name:
                description: The folder's name.
                example: Billing
                type: string
              parentFolderId:
                description: The parent folder ID.
                example: 0
                type: integer
              type:
                description: The folder's type. This is always the `folder` value.
                example: folder
                type: string
              updatedAt:
                description: The date and time at which the folder was updated.
                example: "2022-12-07T18:00:39.000Z"
                format: date-time
                type: string
              updatedBy:
                description: The user who updated the folder.
                example: 12345678
                type: integer
            type: object
      description: Created
    Unauthorized:
      content:
        application/json:
          example:
            error:
              message: Invalid API Key. Every request requires a valid API Key to
                be sent.
              name: AuthenticationError
          schema:
            properties:
              error:
                properties:
                  message:
                    description: The error message.
                    example: Invalid API Key. Every request requires a valid API Key
                      to be sent.
                    type: string
                  name:
                    description: The error message.
                    example: AuthenticationError
                    type: string
                type: object
            type: object
      description: Unauthorized
    folderNotEmptyError:
      content:
        application/json:
          example:
            message: You need to empty this folder before deleting it.
            name: folderNotEmptyError
          schema:
            properties:
              message:
                description: The error message.
                example: You need to empty this folder before deleting it.
                type: string
              name:
                description: The error name.
                example: instanceNotFoundError
                type: string
            type: object
      description: Bad Request
    forbiddenError:
      content:
        application/json:
          example:
            error:
              message: You do not have enough permissions to perform this action.
              name: forbiddenError
          schema:
            properties:
              error:
                properties:
                  message:
                    description: The error message
                    example: You do not have enough permissions to perform this action.
                    type: string
                  name:
                    description: The error name.
                    example: forbiddenError
                    type: string
                type: object
            type: object
      description: Forbidden
    instanceNotFoundApi:
      content:
        application/json:
          example:
            error:
              message: We could not find the API you are looking for
              name: instanceNotFoundError
          schema:
            properties:
              error:
                properties:
                  message:
                    description: The error message.
                    example: We could not find the API you are looking for
                    type: string
                  name:
                    description: The error name.
                    example: instanceNotFoundError
                    type: string
                type: object
            type: object
      description: Instance Not Found
    instanceNotFoundCollection:
      content:
        application/json:
          example:
            error:
              details:
                id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                item: collection
              message: The specified item does not exist.
              name: instanceNotFoundError
          schema:
            properties:
              error:
                properties:
                  details:
                    description: Information about the error.
                    properties:
                      id:
                        description: The collection ID.
                        example: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                        format: uuid
                        type: string
                      item:
                        description: The instance item.
                        example: collection
                        type: string
                    type: object
                  message:
                    description: The error message.
                    example: The specified item does not exist.
                    type: string
                  name:
                    description: The error name.
                    example: instanceNotFoundError
                    type: string
                type: object
            type: object
      description: Instance Not Found
    instanceNotFoundDatabase:
      content:
        application/json:
          example:
            error:
              message: Instance not found in the database.
              name: instanceNotFoundError
          schema:
            properties:
              error:
                properties:
                  message:
                    description: The error message.
                    example: Instance not found in the database.
                    type: string
                  name:
                    description: The error name.
                    example: instanceNotFoundError
                    type: string
                type: object
            type: object
      description: Instance Not Found
    instanceNotFoundElementFolder:
      content:
        application/json:
          examples:
            Folder Not Found:
              value:
                message: Instance not found for the model Folder, id 1
                name: instanceNotFoundError
            Not Found:
              value:
                error:
                  message: The specified API does not exist.
                  name: instanceNotFoundError
          schema:
            properties:
              error:
                properties:
                  message:
                    description: The error message.
                    example: The specified API does not exist.
                    type: string
                  name:
                    description: The error name.
                    example: instanceNotFoundError
                    type: string
                type: object
            type: object
      description: Not Found
    instanceNotFoundEnvironment:
      content:
        application/json:
          example:
            error:
              message: We could not find the environment you are looking for
              name: instanceNotFoundError
          schema:
            properties:
              error:
                properties:
                  message:
                    description: The error message.
                    example: We could not find the environment you are looking for
                    type: string
                  name:
                    description: The error name.
                    example: instanceNotFoundError
                    type: string
                type: object
            type: object
      description: Instance Not Found
    instanceNotFoundMock:
      content:
        application/json:
          example:
            error:
              details: {}
              message: The specified mock does not exist.
              name: instanceNotFoundError
          schema:
            properties:
              error:
                properties:
                  details:
                    description: Information about the error.
                    example: {}
                    items:
                      type: string
                    type: array
                  message:
                    description: The error message.
                    example: The specified mock does not exist.
                    type: string
                  name:
                    description: The error name.
                    example: instanceNotFoundError
                    type: string
                type: object
            type: object
      description: Not Found
    instanceNotFoundMonitor:
      content:
        application/json:
          example:
            error:
              message: The specified monitor does not exist.
              name: instanceNotFoundError
          schema:
            properties:
              error:
                properties:
                  message:
                    description: The error message.
                    example: The specified monitor does not exist.
                    type: string
                  name:
                    description: The error name.
                    example: instanceNotFoundError
                    type: string
                type: object
            type: object
      description: Instance Not Found
    instanceNotFoundWorkspace:
      content:
        application/json:
          example:
            error:
              message: The specified workspace does not exist.
              name: instanceNotFoundError
          schema:
            properties:
              error:
                properties:
                  message:
                    description: The error message.
                    example: The specified workspace does not exist.
                    type: string
                  name:
                    description: The error name.
                    example: instanceNotFoundError
                    type: string
                type: object
            type: object
      description: Instance Not Found
    internalServerError:
      content:
        application/json:
          example:
            error:
              message: An error has occurred on the server.
              name: serverError
          schema:
            properties:
              error:
                properties:
                  message:
                    description: The error message.
                    example: An error has occurred on the server.
                    type: string
                  name:
                    description: The error name.
                    example: serverError
                    type: string
                type: object
            type: object
      description: Internal Server Error
    invalidParamsError:
      content:
        application/json:
          schema:
            properties:
              error:
                properties:
                  message:
                    description: The error message.
                    example: The specified parameter is in an invalid format
                    type: string
                  name:
                    description: The error name.
                    example: invalidParamsError
                    type: string
                type: object
            type: object
      description: Invalid Parameters
    mockServerResponse:
      content:
        application/json:
          example:
            body: |-
              {
                  "message": "Something went wrong; try again later."
              }
            createdAt: "2022-08-02T15:08:03.000Z"
            createdBy: "12345678"
            headers:
            - key: Content-Type
              value: application/json
            id: 965cdd16-fe22-4d96-a161-3d05490ac421
            language: json
            mock: 32cd624d-9986-4f20-9048-89252f722269
            name: Internal Server Error
            statusCode: 500
            updatedAt: "2022-08-02T15:08:03.000Z"
            updatedBy: "12345678"
          schema:
            description: Information about the mock server's responses.
            items:
              description: Information about the server response.
              properties:
                createdAt:
                  description: The date and time at which the server response was
                    created.
                  example: "2022-08-02T14:57:44.000Z"
                  format: date-time
                  type: string
                createdBy:
                  description: The user ID of the user who created the server response.
                  example: "12345678"
                  type: string
                id:
                  description: The server response's ID.
                  example: 965cdd16-fe22-4d96-a161-3d05490ac421
                  format: uuid
                  type: string
                name:
                  description: The server response's name.
                  example: Internal Server Error
                  type: string
                statusCode:
                  description: The server response's 5xx HTTP response code.
                  example: 500
                  type: number
                updatedAt:
                  description: The date and time at which the server response was
                    last updated.
                  example: "2022-08-02T14:57:44.000Z"
                  format: date-time
                  type: string
                updatedBy:
                  description: The user ID of the user who last updated the server
                    response.
                  example: "12345678"
                  type: string
              type: object
            type: array
      description: Successful Response
    paramMissingError:
      content:
        application/json:
          schema:
            properties:
              error:
                properties:
                  message:
                    description: The error message.
                    example: Parameter is missing in the request.
                    type: string
                  name:
                    description: The error name.
                    example: paramMissingError
                    type: string
                type: object
            type: object
      description: Parameter Missing
    rateLimited:
      content:
        application/json:
          example:
            error: rateLimited
            message: Rate limit exceeded. Please retry after 1669048687
          schema:
            properties:
              error:
                description: The error name.
                example: rateLimited
                type: string
              message:
                description: The error message.
                example: Rate limit exceeded. Please retry after 1669048687
                type: string
            type: object
      description: Too Many Requests
    scimBadRequest:
      content:
        application/json:
          examples:
            Invalid Team:
              value:
                detail: This Postman team doesn't exist anymore.
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                status: "400"
          schema:
            properties:
              detail:
                description: Information about the error.
                example: This Postman team doesn't exist anymore.
                type: string
              schemas:
                description: The SCIM schema resource URIs.
                items:
                  example: urn:ietf:params:scim:api:messages:2.0:Error
                  type: string
                type: array
              status:
                description: The HTTP status code.
                example: "400"
                type: string
            type: object
      description: Bad Request
    scimForbidden:
      content:
        application/json:
          examples:
            Admin Team Mismatch:
              value:
                detail: The admin is not allowed to perform this action.
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                status: "403"
            Forbidden:
              value:
                detail: This person isn't a member of the team.
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                status: "403"
            Invalid API Key:
              value:
                detail: Your API key was generated by a Team Admin who is no longer
                  on your team. Use an API key generated by a Team Admin.
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                status: "403"
          schema:
            properties:
              detail:
                description: Information about the error.
                example: Your API key was generated by a Team Admin who is no longer
                  on your team. Use an API key generated by a Team Admin.
                type: string
              schemas:
                description: The SCIM schema resource URIs.
                items:
                  example: urn:ietf:params:scim:api:messages:2.0:Error
                  type: string
                type: array
              status:
                description: The HTTP status code.
                example: "403"
                type: string
            type: object
      description: Forbidden
    scimGroupNotFound:
      content:
        application/json:
          example:
            detail: This group isn't a member of the team.
            schemas:
            - urn:ietf:params:scim:api:messages:2.0:Error
            status: "404"
          schema:
            properties:
              detail:
                description: Information about the error.
                example: This group isn't a member of the team.
                type: string
              schemas:
                description: The SCIM schema resource URIs.
                items:
                  example: urn:ietf:params:scim:api:messages:2.0:Error
                  type: string
                type: array
              status:
                description: The HTTP status code.
                example: "404"
                type: string
            type: object
      description: Not Found
    scimGroupResource:
      content:
        application/json:
          example:
            displayName: Test-API
            externalId: "1234"
            id: 405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
            members:
            - display: SCIM 2 Group A
              value: b1c794f24f4c49f4b5d503a4cb2686ea
            meta:
              created: "2022-02-22T04:24:13.000Z"
              lastModified: "2022-02-22T04:24:13.000Z"
              resourceType: Group
            schemas:
            - urn:ietf:params:scim:schemas:core:2.0:Group
          schema:
            properties:
              externalId:
                description: The group's external ID.
                example: "1234"
                type: string
              id:
                description: The group's SCIM ID.
                example: 405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
                type: string
              members:
                description: Information about the group's members.
                properties:
                  display:
                    description: ""
                    example: ""
                    type: string
                  value:
                    description: ""
                    example: ""
                    type: string
                type: object
              meta:
                description: The response's non-standard meta information.
                properties:
                  created:
                    description: The date and time at which the group was created.
                    example: "2022-02-22T04:24:13.000Z"
                    format: date-time
                    type: string
                  lastModified:
                    description: The date and time at which the group was last modified.
                    example: "2022-02-22T04:24:13.000Z"
                    format: date-time
                    type: string
                  resourceType:
                    description: The resource type.
                    example: Group
                    type: string
                type: object
              schemas:
                description: A list of schema resource URIs.
                items:
                  example: urn:ietf:params:scim:schemas:core:2.0:Group
                  type: string
                type: array
              userName:
                description: The group's display name.
                example: Test-API
                type: string
            type: object
      description: Successful Response
    scimInternalErrorGroup:
      content:
        application/json:
          example:
            detail: Couldn't fetch members of the team.
            schemas:
            - urn:ietf:params:scim:api:messages:2.0:Error
            status: "500"
          schema:
            properties:
              detail:
                description: Information about the error.
                example: Couldn't fetch members of the team.
                type: string
              schemas:
                description: The SCIM schema resource URIs.
                items:
                  example: urn:ietf:params:scim:api:messages:2.0:Error
                  type: string
                type: array
              status:
                description: The HTTP status code.
                example: "500"
                type: string
            type: object
      description: Internal Server Error
    scimInternalErrorGroupUpdate:
      content:
        application/json:
          examples:
            Cannot Add Team Members:
              value:
                detail: Unable to add members to the team. Try again — it should work
                  next time around.
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                status: "500"
            Cannot Get Information:
              value:
                detail: Unable to fetch information about this team member.
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                status: "500"
            Cannot Update Group:
              value:
                detail: Couldn't update this team member's information. Try again
                  — it should work next time around.
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                status: "500"
          schema:
            properties:
              detail:
                description: Information about the error.
                example: Couldn't update this team member's information. Try again
                  — it should work next time around.
                type: string
              schemas:
                description: The SCIM schema resource URIs.
                items:
                  example: urn:ietf:params:scim:api:messages:2.0:Error
                  type: string
                type: array
              status:
                description: The HTTP status code.
                example: "500"
                type: string
            type: object
      description: Internal Server Error
    scimInternalErrorUser:
      content:
        application/json:
          example:
            detail: Unable to fetch information about this team member.
            schemas:
            - urn:ietf:params:scim:api:messages:2.0:Error
            status: "500"
          schema:
            properties:
              detail:
                description: Information about the error.
                example: Unable to fetch information about this team member.
                type: string
              schemas:
                description: The SCIM schema resource URIs.
                items:
                  example: urn:ietf:params:scim:api:messages:2.0:Error
                  type: string
                type: array
              status:
                description: The HTTP status code.
                example: "500"
                type: string
            type: object
      description: Internal Server Error
    scimInternalErrorUserUpdate:
      content:
        application/json:
          examples:
            Cannot Add Team Members:
              value:
                detail: Unable to add members to the team. Try again — it should work
                  next time around.
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                status: "500"
            Cannot Get Information:
              value:
                detail: Unable to fetch information about this team member.
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                status: "500"
            Cannot Update User:
              value:
                detail: Couldn't update this team member's information. Try again
                  — it should work next time around.
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                status: "500"
          schema:
            properties:
              detail:
                description: Information about the error.
                example: Couldn't update this team member's information. Try again
                  — it should work next time around.
                type: string
              schemas:
                description: The SCIM schema resource URIs.
                items:
                  example: urn:ietf:params:scim:api:messages:2.0:Error
                  type: string
                type: array
              status:
                description: The HTTP status code.
                example: "500"
                type: string
            type: object
      description: Internal Server Error
    scimTooManyRequests:
      content:
        application/json:
          example:
            detail: That's 180 attempts in less than a minute. Wait for a minute and
              then try again.
            schemas:
            - urn:ietf:params:scim:api:messages:2.0:Error
            status: 429
          schema:
            properties:
              detail:
                description: Information about the error.
                example: That's 180 attempts in less than a minute. Wait for a minute
                  and then try again.
                type: string
              schemas:
                description: The SCIM schema resource URIs.
                items:
                  example: urn:ietf:params:scim:api:messages:2.0:Error
                  type: string
                type: array
              status:
                description: The HTTP status code.
                example: 429
                type: number
            type: object
      description: Too Many Requests
    scimUnauthorized:
      content:
        application/json:
          example:
            detail: Unable to access the team. Check if you have entered a valid API
              key.
            schemas:
            - urn:ietf:params:scim:api:messages:2.0:Error
            status: "401"
          schema:
            properties:
              detail:
                description: Information about the error.
                example: Unable to access the team. Check if you have entered a valid
                  API key.
                type: string
              schemas:
                description: The SCIM schema resource URIs.
                items:
                  example: urn:ietf:params:scim:api:messages:2.0:Error
                  type: string
                type: array
              status:
                description: The HTTP status code.
                example: "401"
                type: string
            type: object
      description: Unauthorized
    scimUserNotFound:
      content:
        application/json:
          example:
            detail: This person isn't a member of the team.
            schemas:
            - urn:ietf:params:scim:api:messages:2.0:Error
            status: "404"
          schema:
            properties:
              detail:
                description: Information about the error.
                example: This person isn't a member of the team.
                type: string
              schemas:
                description: The SCIM schema resource URIs.
                items:
                  example: urn:ietf:params:scim:api:messages:2.0:Error
                  type: string
                type: array
              status:
                description: The HTTP status code.
                example: "404"
                type: string
            type: object
      description: Not Found
    scimUserResource:
      content:
        application/json:
          example:
            active: true
            externalId: "12345678"
            id: 405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
            meta:
              created: "2021-02-22T04:24:13.000Z"
              lastModified: "2021-02-22T04:24:13.000Z"
              resourceType: User
            name:
              familyName: Lee
              givenName: Taylor
            schemas:
            - urn:ietf:params:scim:schemas:core:2.0:User
            userName: taylor.lee@example.com
          schema:
            properties:
              active:
                description: If true, the team member is active.
                example: true
                type: boolean
              externalId:
                description: The team member's external ID.
                example: "12345678"
                type: string
              id:
                description: The team member's SCIM ID.
                example: 405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
                type: string
              meta:
                description: The response's non-standard meta information.
                properties:
                  created:
                    description: The date and time at which the team member was created.
                    example: "2021-02-22T04:24:13.000Z"
                    format: date-time
                    type: string
                  lastModified:
                    description: The date and time at which the team member was last
                      modified.
                    example: "2021-02-22T04:24:13.000Z"
                    format: date-time
                    type: string
                  resourceType:
                    description: The resource type.
                    example: User
                    type: string
                type: object
              name:
                description: Information about the Postman team member.
                properties:
                  familyName:
                    description: The team member's last name.
                    example: Lee
                    type: string
                  givenName:
                    description: The team member's first name.
                    example: Taylor
                    type: string
                type: object
              schemas:
                description: A list of schema resource URIs.
                items:
                  example: urn:ietf:params:scim:schemas:core:2.0:User
                  type: string
                type: array
              userName:
                description: The team member's SCIM username.
                example: taylor.lee@example.com
                type: string
            type: object
      description: Successful Response
    serverResponseNotFoundError:
      content:
        application/json:
          example:
            error:
              message: We could not find the mock server response you are looking
                for.
              name: serverResponseNotFoundError
          schema:
            properties:
              error:
                properties:
                  message:
                    description: The error message.
                    example: We could not find the mock server response you are looking
                      for.
                    type: string
                  name:
                    description: The error name.
                    example: serverResponseNotFoundError
                    type: string
                type: object
            type: object
      description: Bad Request
  schemas:
    CreatePANApi:
      properties:
        api:
          properties:
            id:
              description: The API's ID.
              example: 5360b75f-447e-467c-9299-12fd6c92450d
              type: string
            parentFolderId:
              description: The API's parent folder ID.
              example: 1
              type: integer
          required:
          - id
          - parentFolderId
          type: object
      type: object
    CreatePANCollection:
      properties:
        collection:
          properties:
            id:
              description: The collection's ID.
              example: 5360b75f-447e-467c-9299-12fd6c92450d
              type: string
            parentFolderId:
              description: The collection's parent folder ID.
              example: 1
              type: integer
            summary:
              description: The collection's summary.
              example: The Billing API collection.
              type: string
          required:
          - id
          - parentFolderId
          type: object
      type: object
    CreatePANFolder:
      properties:
        folder:
          properties:
            description:
              description: The folder's description.
              example: The Billing API.
              type: string
            name:
              description: The folder's name.
              example: Billing
              type: string
            parentFolderId:
              default: 0
              description: The folder's parent folder ID. This value defaults to `0`.
              example: 0
              type: integer
          required:
          - name
          type: object
      type: object
    CreatePANWorkspace:
      properties:
        workspace:
          properties:
            id:
              description: The workspace's ID.
              example: 5360b75f-447e-467c-9299-12fd6c92450d
              type: string
            parentFolderId:
              description: The workspace's parent folder ID.
              example: 1
              type: integer
          required:
          - id
          - parentFolderId
          type: object
      type: object
    PANElementCreated:
      description: Information about the Private API Network element.
      properties:
        addedAt:
          description: The date and time at which the element was added.
          example: "2022-06-09T14:48:45.000Z"
          format: date-time
          type: string
        addedBy:
          description: The user who added the element.
          example: 12345678
          type: integer
        createdAt:
          description: The date and time at which the element was created.
          example: "2021-10-11T09:39:33.000Z"
          format: date-time
          type: string
        createdBy:
          description: The user who created the element.
          example: 12345678
          type: integer
        description:
          description: The element's description.
          example: null
          type: string
        href:
          description: The element's Postman URL.
          example: https://api.getpostman.com/collections/12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
          format: url
          type: string
        id:
          description: The element's ID or UID.
          example: 5360b75f-447e-467c-9299-12fd6c92450d
          type: string
        name:
          description: The element's name.
          example: Billing API
          type: string
        parentFolderId:
          description: The parent folder's ID.
          example: 1
          type: integer
        summary:
          description: The element's summary.
          example: The payments and account services API.
          type: string
        type:
          description: The element's type.
          example: api
          type: string
        updatedAt:
          description: The date and time at which the element was last updated.
          example: "2022-12-07T17:54:33.000Z"
          format: date-time
          type: string
        updatedBy:
          description: The user who last updated the element.
          example: 12345678
          type: integer
      type: object
    PANFolderCreated:
      description: Information about the Private API Network folder.
      example:
        createdAt: "2022-12-07T18:00:39.000Z"
        createdBy: 12345678
        description: The Billing API.
        id: 1
        name: Billing
        parentFolderId: 0
        type: folder
        updatedAt: "2022-12-07T18:00:39.000Z"
        updatedBy: 12345678
      properties:
        createdAt:
          description: The date and time at which the element was created.
          example: "2022-12-07T18:00:39.000Z"
          format: date-time
          type: string
        createdBy:
          description: The user who created the folder.
          example: 12345678
          type: integer
        description:
          description: The folder's description.
          example: The Billing API.
          type: string
        id:
          description: The folder's ID.
          example: 1
          type: integer
        name:
          description: The folder's name.
          example: Billing
          type: string
        parentFolderId:
          description: The parent folder ID.
          example: 0
          type: integer
        type:
          description: The folder's type. This is always the `folder` value.
          example: folder
          type: string
        updatedAt:
          description: The date and time at which the folder was updated.
          example: "2022-12-07T18:00:39.000Z"
          format: date-time
          type: string
        updatedBy:
          description: The user who updated the folder.
          example: 12345678
          type: integer
      type: object
    UpdatePANApi:
      properties:
        api:
          properties:
            parentFolderId:
              description: The API's new parent folder ID.
              example: 1
              type: integer
          type: object
      type: object
    UpdatePANCollection:
      properties:
        collection:
          properties:
            parentFolderId:
              description: The collection's new parent folder ID.
              example: 1
              type: integer
            summary:
              description: The collection's updated summary.
              example: The Billing API collection.
              type: string
          type: object
      type: object
    UpdatePANFolder:
      properties:
        folder:
          properties:
            description:
              description: The folder's updated description.
              example: The Billing API.
              type: string
            name:
              description: The folder's new name.
              example: Billing
              type: string
            parentFolderId:
              description: The folder's new parent folder ID.
              example: 0
              type: integer
          type: object
      type: object
    UpdatePANWorkspace:
      properties:
        workspace:
          properties:
            parentFolderId:
              description: The workspace's new parent folder ID.
              example: 1
              type: integer
          type: object
      type: object
    importExportFile:
      properties:
        input:
          description: A file containing a valid user's export .zip file.
          format: binary
          type: string
        type:
          description: The `file` type value.
          enum:
          - file
          example: file
          type: string
      required:
      - type
      - input
      type: object
    jsonSchema:
      properties:
        input:
          description: An object that contains a valid JSON OpenAPI definition. For
            more information, read the [OpenAPI documentation](https://swagger.io/docs/specification/basic-structure/).
          properties: {}
          type: object
        type:
          description: The OpenAPI definition type.
          enum:
          - json
          example: json
          type: string
      type: object
    jsonStringified:
      properties:
        input:
          description: The stringified OpenAPI definition.
          example: |-
            {
              "openapi": "3.0.0",
              "info": {
                "version": "1.0.0",
                "title": "Test API"
              },
              "servers": [
                {
                  "url": "http://locahost:3000"
                }
              ],
              "paths": {
                "/user": {
                  "get": {
                    "summary": "List all users",
                    "operationId": "listUser",
                    "parameters": [
                      {
                        "name": "id",
                        "in": "query",
                        "required": true,
                        "description": "The user's ID.",
                        "example": 1234,
                        "schema": {
                          "type": "integer",
                          "format": "int32"
                        }
                      }
                    ],
                    "responses": {
                      "200": {
                        "description": "Information about the user.",
                        "headers": {
                          "x-next": {
                            "description": "A link to the next page of responses.",
                            "schema": {
                              "type": "string"
                            }
                          }
                        },
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/User"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "components": {
                "schemas": {
                  "User": {
                    "type": "object",
                    "required": [
                      "id",
                      "name"
                    ],
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "name": {
                        "type": "string"
                      },
                      "tag": {
                        "type": "string"
                      }
                    }
                  },
                  "Error": {
                    "type": "object",
                    "required": [
                      "code",
                      "message"
                    ],
                    "properties": {
                      "code": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          type: string
        type:
          description: The OpenAPI definition type.
          enum:
          - json
          example: json
          type: string
      type: object
    scimGroupResource:
      description: The SCIM group resource object.
      properties:
        displayName:
          description: The group's display name.
          example: Test SCIMv2
          type: string
        externalId:
          description: The group's external ID.
          example: "1234"
          type: string
        id:
          description: The group's SCIM ID.
          example: 405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
          type: string
        members:
          description: Information about the group's members.
          properties:
            display:
              description: ""
              example: ""
              type: string
            value:
              description: ""
              example: ""
              type: string
          type: object
        meta:
          description: The response's non-standard meta information.
          properties:
            created:
              description: The date and time at which the group was created.
              example: "2022-02-22T04:24:13.000Z"
              format: date-time
              type: string
            lastModified:
              description: The date and time at which the group was last modified.
              example: "2022-02-22T04:24:13.000Z"
              format: date-time
              type: string
            resourceType:
              description: The resource type.
              example: Group
              type: string
          type: object
        schemas:
          description: A list of schema resource URIs.
          items:
            example: urn:ietf:params:scim:schemas:core:2.0:Group
            type: string
          type: array
      type: object
    scimUserResource:
      description: The SCIM user resource object.
      properties:
        active:
          description: If true, the team member is active.
          example: true
          type: boolean
        externalId:
          description: The team member's external ID.
          example: "12345678"
          type: string
        id:
          description: The team member's SCIM ID.
          example: 405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
          type: string
        meta:
          description: The response's non-standard meta information.
          properties:
            created:
              description: The date and time at which the team member was created.
              example: "2021-02-22T04:24:13.000Z"
              format: date-time
              type: string
            lastModified:
              description: The date and time at which the team member was last modified.
              example: "2021-02-22T04:24:13.000Z"
              format: date-time
              type: string
            resourceType:
              description: The resource type.
              example: User
              type: string
          type: object
        name:
          description: Information about the Postman team member.
          properties:
            familyName:
              description: The team member's last name.
              example: Lee
              type: string
            givenName:
              description: The team member's first name.
              example: Taylor
              type: string
          type: object
        schemas:
          description: A list of schema resource URIs.
          items:
            example: urn:ietf:params:scim:schemas:core:2.0:User
            type: string
          type: array
        userName:
          description: The team member's SCIM username.
          example: taylor.lee@example.com
          type: string
      type: object
  securitySchemes:
    PostmanApiKey:
      in: header
      name: x-api-key
      type: apiKey
tags:
- description: The `/collections` endpoints let you manage your [collections](https://learning.postman.com/docs/sending-requests/intro-to-collections/).
  name: Collections
- description: The `/environments` endpoints let you manage your [environments](https://learning.postman.com/docs/sending-requests/managing-environments/).
  name: Environments
- description: The `/mocks` endpoints let you manage your [mock servers](https://learning.postman.com/docs/designing-and-developing-your-api/mocking-data/setting-up-mock/).
  name: Mocks
- description: The `/monitors` endpoints let you manage your [monitors](https://learning.postman.com/docs/monitoring-your-api/intro-monitors/).
  name: Monitors
- description: The `/workspaces` endpoints let you manage your [workspaces](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/creating-workspaces/).
  name: Workspaces
- description: The `/me` endpoints let you manage information about the authenticated
    user.
  name: User
- description: The `/import` endpoints let you manage [importing and exporting](https://learning.postman.com/docs/getting-started/importing-and-exporting-data/)
    Postman data.
  name: Import
- description: The `/apis` endpoints let you manage your APIs.
  name: API
- description: |
    The API version endpoints let you manage your [API's versions](https://learning.postman.com/docs/designing-and-developing-your-api/versioning-an-api/versioning-an-api-overview/).

    ### Important

    **API versions are deprecated as of Postman v10 and higher.**

    In Postman v9, versions were major iterations of your API you could work on at the same time. In Postman v10, published versions are static representations of your API that consumers can reference (like releases in Postman v9). If you need to work on more than one major iteration of your API in Postman v10, create separate APIs.
  name: API Version
- description: The Schema endpoints let you manage your API's schemas.
  name: Schema
- description: The Relations endpoints let you manage your API's relations. [Relations](https://learning.postman.com/docs/designing-and-developing-your-api/developing-an-api/)
    are an API's connections to items such as documentation, tests, environments,
    mocks, and monitors.
  name: Relations
- description: The `/webhooks` endpoints let you manage [custom webhooks](https://learning.postman.com/docs/running-collections/collection-webhooks/).
  name: Webhooks
- description: |
    Postman supports [SCIM](https://en.wikipedia.org/wiki/System_for_Cross-domain_Identity_Management) (System for Cross-domain Identity Management), which allows you to automate the provisioning of your team. You can deploy Postman at scale across your organization and control access to it with your identity provider.

    **Note:**

    - You **must** be a [Postman Team admin](http://learning.postman.com/docs/collaborating-in-postman/roles-and-permissions/#team-roles) to enable SCIM.
    - SCIM provisioning is only available with a Postman **Enterprise** [pricing plan](https://www.postman.com/pricing).

    ### Enabling SCIM provisioning in Postman

    You must [configure SSO](https://learning.postman.com/docs/administration/sso/admin-sso/) and [enable SCIM](http://learning.postman.com/docs/administration/managing-your-team/configuring-scim/#enabling-scim-provisioning) for your Postman team to use these endpoints.

    **Important:**

    To use SCIM, you must have only **one** SSO method configured. If you have more than one SSO method enabled, you **cannot** generate an SCIM API key.

    ### SCIM provisioning limitations

    You can only deactivate users with the SCIM API. You **cannot** permanently delete users with the API.

    ### Rate limits

    For your organization's team, Postman applies per-minute rate limits across all SCIM API endpoints. This helps ensure that you have the best experience using Postman's SCIM API. The rate limits apply as follows:

    - **Write (POST, PUT, PATCH)** — 180 requests per minute.
    - **Read (GET)** — 300 requests per minute.

    If your requests are limited, the API will return an HTTP `429 Too Many Requests` response status code.
  name: SCIM 2.0 - Identity
- description: |
    The `/scim/v2/Users` endpoint lets you provision and manage your Postman users.

    **Note:**

    You can only deactivate users with the SCIM API. You **cannot** permanently delete users with the API.

    ### Provisioning users with the SCIM API

    - You can only deactivate users with the SCIM API. You cannot permanently delete users with the API.
    - Users created with the SCIM API are automatically created in Postman:
      - If the account's email ID does not exist, the user is also added to their organization's Postman team.
      - If the account's email ID already exists, the system sends the user an email invite to join the Postman team. After they accept the invite, the are added to the team.
    - By default, new users are given the developer role in Postman. Postman user roles cannot be updated via the SCIM API. You must manage user and group roles in Postman.
  name: User Provisioning
- description: The `/scim/v2/Groups` endpoint lets you provision and manage your Postman
    groups.
  name: Group Provisioning
- description: The API Security endpoints let you manage the [security of your API](https://learning.postman.com/docs/api-governance/api-definition/api-definition-warnings/).
    API security includes ensuring you follow security and format warnings and schema
    validation.
  name: API Security
- description: |
    The [Audit Logs](https://learning.postman.com/docs/administration/audit-logs/) endpoints let you monitor and analyze your Professional or Enterprise Postman teams.

    **Note:**

    These endpoints are **only** available to Postman **Professional** and **Enterprise** [pricing plans](https://www.postman.com/pricing).
  name: Audit Logs
- description: The `/private` endpoint lets you manage and work with your team's [Private
    API Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/).
  name: Private API Network
